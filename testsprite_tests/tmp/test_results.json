[
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "ae180453-c61f-4901-92a1-240d104fea2c",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC001-test_firebase_authentication_with_valid_idtoken",
    "description": "Verify that the /auth/firebase endpoint successfully authenticates a user when provided with a valid Firebase idToken and returns a valid JWT token in the response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_firebase_authentication_with_valid_idtoken():\n    url = f\"{BASE_URL}/auth/firebase\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Since Firebase auth is mocked, we can use any valid-looking idToken string\n    payload = {\n        \"idToken\": \"mock-valid-id-token\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    json_response = response.json()\n    assert isinstance(json_response, dict), \"Response is not a JSON object\"\n    # The response should contain a JWT token, typically under a key like 'token' or 'jwt'\n    # Since the schema references JwtLoginResponse, we expect a JWT token string in response\n    # We check for presence of a token key and that it is a non-empty string\n    token = json_response.get(\"token\") or json_response.get(\"jwt\") or json_response.get(\"accessToken\")\n    assert token is not None, \"JWT token not found in response\"\n    assert isinstance(token, str) and len(token) > 0, \"JWT token is empty or not a string\"\n\ntest_firebase_authentication_with_valid_idtoken()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.059Z",
    "modified": "2025-08-02T02:11:23.762Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "50c029ca-56d8-4999-b651-a55bf4f16c3e",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC002-test_create_new_hotel_with_valid_data",
    "description": "Verify that the /api/hotels/{userId} POST endpoint creates a new hotel successfully when provided with valid hotel registration data and a valid userId.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_create_new_hotel_with_valid_data():\n    # Mock userId for testing\n    user_id = 12345\n\n    # Sample valid hotel registration data based on typical hotel registration fields\n    hotel_data = {\n        \"name\": f\"Test Hotel {uuid.uuid4()}\",\n        \"address\": \"123 Test Street\",\n        \"district\": \"Test District\",\n        \"hotelType\": \"Boutique\",\n        \"phone\": \"+1234567890\",\n        \"email\": \"contact@testhotel.com\",\n        \"description\": \"A lovely test hotel for automation testing.\",\n        \"amenities\": [\"Free WiFi\", \"Pool\", \"Gym\"],\n        \"photos\": [\n            \"https://example.com/photo1.jpg\",\n            \"https://example.com/photo2.jpg\"\n        ]\n    }\n\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    hotel_id = None\n    try:\n        # Create new hotel\n        response = requests.post(\n            f\"{BASE_URL}/api/hotels/{user_id}\",\n            json=hotel_data,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        # The response body is not specified, so just check success status\n\n        # Optionally, get all hotels and verify the new hotel is listed (if API supports)\n        # Or get hotel by userId and verify details\n        get_response = requests.get(\n            f\"{BASE_URL}/api/hotels/{user_id}\",\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert get_response.status_code == 200, f\"Expected status code 200 on get, got {get_response.status_code}\"\n        hotel_info = get_response.json()\n        # Validate that the returned hotel info matches the created data (at least name and email)\n        assert hotel_info.get(\"name\") == hotel_data[\"name\"], \"Hotel name mismatch\"\n        assert hotel_info.get(\"email\") == hotel_data[\"email\"], \"Hotel email mismatch\"\n\n        # If hotel ID is returned in get_response, store it for cleanup\n        hotel_id = hotel_info.get(\"id\")\n\n    finally:\n        # Cleanup: delete the created hotel if hotel_id is available\n        if hotel_id:\n            try:\n                del_response = requests.delete(\n                    f\"{BASE_URL}/api/hotels/{hotel_id}\",\n                    headers=headers,\n                    timeout=TIMEOUT\n                )\n                # Accept 200 or 204 as success for delete\n                assert del_response.status_code in (200, 204), f\"Failed to delete hotel with id {hotel_id}\"\n            except Exception:\n                pass\n\ntest_create_new_hotel_with_valid_data()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 73, in <module>\n  File \"<string>\", line 40, in test_create_new_hotel_with_valid_data\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.065Z",
    "modified": "2025-08-02T02:12:00.542Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "30f7c0d4-9be0-445d-9cc5-05378a59198b",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC003-test_get_hotel_by_user_id",
    "description": "Verify that the /api/hotels/{userId} GET endpoint returns the correct hotel details associated with the given userId.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\ndef test_get_hotel_by_user_id():\n    # Since userId is required and not provided, create a new hotel with a new userId, then get it by userId\n    user_id = int(uuid.uuid4().int % 100000)  # Generate a pseudo-random userId integer\n\n    hotel_request_payload = {\n        \"name\": \"Test Hotel for User {}\".format(user_id),\n        \"address\": \"123 Test St\",\n        \"district\": \"Test District\",\n        \"hotelType\": \"Test Type\",\n        \"phone\": \"1234567890\",\n        \"email\": \"testhotel{}@example.com\".format(user_id),\n        \"description\": \"A test hotel created for testing.\",\n        \"amenities\": [\"Free WiFi\", \"Pool\"],\n        \"photos\": []\n    }\n\n    hotel_id = None\n    try:\n        # Create hotel for the userId\n        create_response = requests.post(\n            f\"{BASE_URL}/api/hotels/{user_id}\",\n            json=hotel_request_payload,\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        assert create_response.status_code == 200, f\"Hotel creation failed: {create_response.text}\"\n\n        # Get hotel by userId\n        get_response = requests.get(\n            f\"{BASE_URL}/api/hotels/{user_id}\",\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        assert get_response.status_code == 200, f\"Get hotel by userId failed: {get_response.text}\"\n\n        hotel_data = get_response.json()\n        # Validate that the returned hotel data matches the created hotel details\n        assert hotel_data.get(\"name\") == hotel_request_payload[\"name\"], \"Hotel name mismatch\"\n        assert hotel_data.get(\"address\") == hotel_request_payload[\"address\"], \"Hotel address mismatch\"\n        assert hotel_data.get(\"district\") == hotel_request_payload[\"district\"], \"Hotel district mismatch\"\n        assert hotel_data.get(\"hotelType\") == hotel_request_payload[\"hotelType\"], \"Hotel type mismatch\"\n        assert hotel_data.get(\"phone\") == hotel_request_payload[\"phone\"], \"Hotel phone mismatch\"\n        assert hotel_data.get(\"email\") == hotel_request_payload[\"email\"], \"Hotel email mismatch\"\n        assert hotel_data.get(\"description\") == hotel_request_payload[\"description\"], \"Hotel description mismatch\"\n        assert set(hotel_data.get(\"amenities\", [])) == set(hotel_request_payload[\"amenities\"]), \"Hotel amenities mismatch\"\n        assert isinstance(hotel_data.get(\"photos\"), list), \"Hotel photos should be a list\"\n\n        # Save hotel id for cleanup if available\n        hotel_id = hotel_data.get(\"id\")\n    finally:\n        # Cleanup: delete the created hotel if hotel_id is available\n        if hotel_id is not None:\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/hotels/{hotel_id}\",\n                    headers=HEADERS,\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n\ntest_get_hotel_by_user_id()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 69, in <module>\n  File \"<string>\", line 33, in test_get_hotel_by_user_id\nAssertionError: Hotel creation failed: {\"status\":404,\"error\":\"Not Found\",\"message\":\"User not found with id: 44106\",\"timestamp\":\"2025-08-02T02:11:25.147544Z\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.069Z",
    "modified": "2025-08-02T02:11:41.597Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "e3ef208f-2f70-4685-b4b3-ea53d1c43794",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC004-test_get_all_hotels_with_pagination",
    "description": "Verify that the /api/hotels GET endpoint returns a paginated list of hotels according to the page and size query parameters.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_get_all_hotels_with_pagination():\n    url = f\"{BASE_URL}/api/hotels\"\n    params = {\n        \"page\": 1,\n        \"size\": 5\n    }\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(data, dict) or isinstance(data, list), \"Response JSON should be a dict or list\"\n\n    if isinstance(data, dict):\n        # Check if 'content' or 'items' keys exist and are lists\n        if 'content' in data:\n            hotels_list = data['content']\n            assert isinstance(hotels_list, list), \"'content' should be a list\"\n        elif 'items' in data:\n            hotels_list = data['items']\n            assert isinstance(hotels_list, list), \"'items' should be a list\"\n        else:\n            # Neither key present, fallback check if the dict itself represents a single hotel or empty\n            assert False, \"Paginated response should contain 'content' or 'items' key\"\n\n        assert len(hotels_list) <= params[\"size\"], f\"Number of hotels returned {len(hotels_list)} exceeds page size {params['size']}\"\n    else:\n        # If response is a list, check length\n        assert len(data) <= params[\"size\"], f\"Number of hotels returned {len(data)} exceeds page size {params['size']}\"\n\ntest_get_all_hotels_with_pagination()\n",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.074Z",
    "modified": "2025-08-02T02:11:48.723Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "19bac058-c839-4c1c-9217-189cfb91a39b",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC005-test_search_hotels_by_district_and_type",
    "description": "Verify that the /api/hotels/search GET endpoint returns hotels filtered by district and hotelType parameters, supports pagination, and only includes verified hotels.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_search_hotels_by_district_and_type():\n    # Since we need verified hotels, create a hotel, verify it, then search\n    # Mock userId for hotel creation (assuming 1 for test)\n    user_id = 1\n\n    # Sample hotel data for creation\n    hotel_data = {\n        \"name\": f\"Test Hotel {uuid.uuid4()}\",\n        \"address\": \"123 Test St\",\n        \"district\": \"TestDistrict\",\n        \"hotelType\": \"TestType\",\n        \"description\": \"A hotel for testing\",\n        \"phone\": \"1234567890\",\n        \"email\": \"testhotel@example.com\",\n        \"amenities\": [\"WiFi\", \"Pool\"],\n        \"photos\": []\n    }\n\n    headers = {\"Content-Type\": \"application/json\"}\n\n    hotel_id = None\n    try:\n        # Create hotel\n        create_resp = requests.post(\n            f\"{BASE_URL}/api/hotels/{user_id}\",\n            json=hotel_data,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert create_resp.status_code == 200, f\"Hotel creation failed: {create_resp.text}\"\n        created_hotel = create_resp.json()\n        # The API doc does not specify response schema for creation, assume it returns hotel with id\n        # If not, we need to get hotel list or details to find id\n        # Try to get hotel id from response or fallback to search by name\n        if isinstance(created_hotel, dict) and \"id\" in created_hotel:\n            hotel_id = created_hotel[\"id\"]\n        else:\n            # fallback: get all hotels and find by name\n            list_resp = requests.get(f\"{BASE_URL}/api/hotels\", timeout=TIMEOUT)\n            assert list_resp.status_code == 200\n            hotels = list_resp.json()\n            for h in hotels:\n                if h.get(\"name\") == hotel_data[\"name\"]:\n                    hotel_id = h.get(\"id\")\n                    break\n            assert hotel_id is not None, \"Created hotel ID not found\"\n\n        # Verify the hotel by admin\n        verify_resp = requests.post(\n            f\"{BASE_URL}/api/hotels/{hotel_id}/verify\",\n            timeout=TIMEOUT\n        )\n        assert verify_resp.status_code == 200, f\"Hotel verification failed: {verify_resp.text}\"\n\n        # Now search hotels by district and hotelType with pagination\n        params = {\n            \"district\": hotel_data[\"district\"],\n            \"hotelType\": hotel_data[\"hotelType\"],\n            \"page\": 0,\n            \"size\": 10\n        }\n        search_resp = requests.get(\n            f\"{BASE_URL}/api/hotels/search\",\n            params=params,\n            timeout=TIMEOUT\n        )\n        assert search_resp.status_code == 200, f\"Hotel search failed: {search_resp.text}\"\n        search_results = search_resp.json()\n        assert isinstance(search_results, list), \"Search results should be a list\"\n\n        # Validate that all returned hotels match district, hotelType and are verified\n        for hotel in search_results:\n            assert hotel.get(\"district\") == hotel_data[\"district\"], \"Hotel district mismatch\"\n            assert hotel.get(\"hotelType\") == hotel_data[\"hotelType\"], \"Hotel type mismatch\"\n            # Assuming 'verified' field indicates verification status\n            assert hotel.get(\"verified\") is True, \"Hotel is not verified\"\n\n        # Validate pagination: size should not exceed requested size\n        assert len(search_results) <= params[\"size\"], \"Returned more hotels than page size\"\n\n    finally:\n        # Cleanup: delete the created hotel if possible\n        if hotel_id is not None:\n            # No delete endpoint specified in PRD for hotels, so skip deletion\n            # If delete endpoint existed, we would call it here\n            pass\n\ntest_search_hotels_by_district_and_type()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 94, in <module>\n  File \"<string>\", line 36, in test_search_hotels_by_district_and_type\nAssertionError: Hotel creation failed: {\"status\":404,\"error\":\"Not Found\",\"message\":\"User not found with id: 1\",\"timestamp\":\"2025-08-02T02:11:28.701622Z\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.079Z",
    "modified": "2025-08-02T02:11:39.700Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "576751d3-5c2d-4065-9adb-7ffea22a3aa2",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC006-test_verify_hotel_by_admin",
    "description": "Verify that the /api/hotels/{id}/verify POST endpoint allows an admin to verify a hotel by its id and returns a success response.",
    "code": "import requests\nimport json\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_verify_hotel_by_admin():\n    # Mock admin authentication (assuming mock auth returns a JWT token for admin)\n    auth_url = f\"{BASE_URL}/auth/firebase\"\n    mock_id_token = \"mock-admin-id-token\"\n    auth_payload = {\"idToken\": mock_id_token}\n    headers = {\"Content-Type\": \"application/json\"}\n\n    try:\n        auth_response = requests.post(auth_url, json=auth_payload, headers=headers, timeout=TIMEOUT)\n        assert auth_response.status_code == 200, f\"Authentication failed: {auth_response.text}\"\n        jwt_token = auth_response.json().get(\"token\")\n        assert jwt_token, \"JWT token not found in authentication response\"\n    except Exception as e:\n        raise AssertionError(f\"Authentication request failed: {e}\")\n\n    auth_headers = {\n        \"Authorization\": f\"Bearer {jwt_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Step 1: Create a new hotel to verify\n    # We need a userId for hotel creation; create a mock user or use a fixed userId for admin\n    # For this test, assume userId=1 (admin user) is valid for hotel creation\n    user_id = 1\n    create_hotel_url = f\"{BASE_URL}/api/hotels/{user_id}\"\n    hotel_data = {\n        \"name\": \"Test Hotel for Verification\",\n        \"address\": \"123 Test St\",\n        \"district\": \"Test District\",\n        \"hotelType\": \"Test Type\",\n        \"phone\": \"1234567890\",\n        \"email\": \"testhotel@example.com\",\n        \"description\": \"A hotel created for verification test\",\n        \"amenities\": [\"WiFi\", \"Parking\"],\n        \"photos\": []\n    }\n\n    hotel_id = None\n    try:\n        create_response = requests.post(create_hotel_url, json=hotel_data, headers=auth_headers, timeout=TIMEOUT)\n        assert create_response.status_code == 200, f\"Hotel creation failed: {create_response.text}\"\n        created_hotel = create_response.json()\n        hotel_id = created_hotel.get(\"id\")\n        assert hotel_id is not None, \"Created hotel ID not found in response\"\n\n        # Step 2: Verify the hotel by admin using the verify endpoint\n        verify_url = f\"{BASE_URL}/api/hotels/{hotel_id}/verify\"\n        verify_response = requests.post(verify_url, headers=auth_headers, timeout=TIMEOUT)\n        assert verify_response.status_code == 200, f\"Hotel verification failed: {verify_response.text}\"\n\n        # Optionally check response content if any success message or status\n        verify_json = verify_response.json()\n        # Assuming response contains a message or status field indicating success\n        assert (\"success\" in verify_json.get(\"message\", \"\").lower()) or (\"verified\" in verify_json.get(\"message\", \"\").lower()) or verify_response.text.lower().find(\"success\") != -1, \\\n            \"Verification success message not found in response\"\n\n    finally:\n        # Cleanup: Delete the created hotel to keep test environment clean\n        if hotel_id is not None:\n            delete_url = f\"{BASE_URL}/api/hotels/{hotel_id}\"\n            try:\n                requests.delete(delete_url, headers=auth_headers, timeout=TIMEOUT)\n            except Exception:\n                pass\n\ntest_verify_hotel_by_admin()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 72, in <module>\n  File \"<string>\", line 47, in test_verify_hotel_by_admin\nAssertionError: Hotel creation failed: {\"status\":404,\"error\":\"Not Found\",\"message\":\"User not found with id: 1\",\"timestamp\":\"2025-08-02T02:11:32.428120Z\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.083Z",
    "modified": "2025-08-02T02:11:43.193Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "479e575e-0a96-4ba1-a0d5-80ae163896dd",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC007-test_create_new_room",
    "description": "Verify that the /api/rooms POST endpoint creates a new room successfully when provided with valid room data.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_create_new_room():\n    # Sample valid room data based on typical RoomRequest schema inferred from PRD\n    room_data = {\n        \"roomType\": \"DELUXE\",\n        \"roomNumber\": str(uuid.uuid4())[:8],  # Unique room number\n        \"price\": 150.0,\n        \"description\": \"A deluxe room with sea view\",\n        \"capacity\": 2,\n        \"amenities\": [\"WiFi\", \"Air Conditioning\", \"TV\"],\n        \"photos\": [\n            \"https://example.com/photos/room1.jpg\",\n            \"https://example.com/photos/room2.jpg\"\n        ]\n    }\n\n    created_room_id = None\n    try:\n        # Create a new room\n        response = requests.post(\n            f\"{BASE_URL}/api/rooms\",\n            json=room_data,\n            timeout=TIMEOUT\n        )\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        response_json = response.json()\n        # Validate response contains an ID\n        assert \"id\" in response_json, \"Response JSON does not contain room ID\"\n        created_room_id = response_json[\"id\"]\n        assert created_room_id is not None, \"Room ID is None\"\n\n        # Optionally, get the room by ID to verify creation\n        get_response = requests.get(\n            f\"{BASE_URL}/api/rooms/{created_room_id}\",\n            timeout=TIMEOUT\n        )\n        assert get_response.status_code == 200, f\"Expected status code 200 on GET, got {get_response.status_code}\"\n        room_info = get_response.json()\n        assert room_info.get(\"id\") == created_room_id, \"Room ID mismatch in GET response\"\n        assert room_info.get(\"roomNumber\") == room_data[\"roomNumber\"], \"Room number mismatch\"\n        assert room_info.get(\"price\") == room_data[\"price\"], \"Room price mismatch\"\n        assert room_info.get(\"capacity\") == room_data[\"capacity\"], \"Room capacity mismatch\"\n\n    finally:\n        # Cleanup: delete the created room if it was created\n        if created_room_id is not None:\n            delete_response = requests.delete(\n                f\"{BASE_URL}/api/rooms/{created_room_id}\",\n                timeout=TIMEOUT\n            )\n            assert delete_response.status_code == 200, f\"Failed to delete room with ID {created_room_id}\"\n\ntest_create_new_room()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 58, in <module>\n  File \"<string>\", line 30, in test_create_new_room\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.088Z",
    "modified": "2025-08-02T02:12:06.666Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "35f56e7a-9249-4c0d-882a-a49969df663b",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC008-test_create_new_booking",
    "description": "Verify that the /api/bookings POST endpoint creates a new booking successfully when provided with valid booking request data.",
    "code": "import requests\nimport uuid\nfrom datetime import datetime, timedelta\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_create_new_booking():\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Step 1: Create a hotel (required resource for room)\n    hotel_payload = {\n        \"name\": \"Test Hotel \" + str(uuid.uuid4()),\n        \"address\": \"123 Test St\",\n        \"district\": \"Test District\",\n        \"hotelType\": \"STANDARD\",\n        \"description\": \"A test hotel for booking creation\",\n        \"phone\": \"1234567890\",\n        \"email\": \"testhotel@example.com\",\n        \"website\": \"http://testhotel.example.com\",\n        \"amenities\": [\"WiFi\", \"Parking\"],\n        \"photos\": []\n    }\n    # Using a mock userId for hotel creation (assuming 1)\n    user_id = 1\n    hotel = None\n    room = None\n    booking = None\n\n    try:\n        hotel_resp = requests.post(\n            f\"{BASE_URL}/api/hotels/{user_id}\",\n            json=hotel_payload,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert hotel_resp.status_code == 200, f\"Hotel creation failed: {hotel_resp.text}\"\n        hotel = hotel_resp.json()\n        hotel_id = hotel.get(\"id\")\n        assert hotel_id is not None, \"Hotel ID not returned\"\n\n        # Step 2: Create a room for the hotel\n        room_payload = {\n            \"hotelId\": hotel_id,\n            \"roomType\": \"DELUXE\",\n            \"price\": 150.0,\n            \"description\": \"Deluxe room for testing booking\",\n            \"maxGuests\": 2,\n            \"photos\": []\n        }\n        room_resp = requests.post(\n            f\"{BASE_URL}/api/rooms\",\n            json=room_payload,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert room_resp.status_code == 200, f\"Room creation failed: {room_resp.text}\"\n        room = room_resp.json()\n        room_id = room.get(\"id\")\n        assert room_id is not None, \"Room ID not returned\"\n\n        # Step 3: Create a booking for the room\n        check_in_date = (datetime.now() + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n        check_out_date = (datetime.now() + timedelta(days=3)).strftime(\"%Y-%m-%d\")\n\n        booking_payload = {\n            \"roomId\": room_id,\n            \"userId\": user_id,\n            \"checkIn\": check_in_date,\n            \"checkOut\": check_out_date,\n            \"guests\": 2,\n            \"specialRequests\": \"None\"\n        }\n        booking_resp = requests.post(\n            f\"{BASE_URL}/api/bookings\",\n            json=booking_payload,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert booking_resp.status_code == 200, f\"Booking creation failed: {booking_resp.text}\"\n        booking = booking_resp.json()\n        booking_id = booking.get(\"id\")\n        assert booking_id is not None, \"Booking ID not returned\"\n        assert booking.get(\"roomId\") == room_id, \"Booking roomId mismatch\"\n        assert booking.get(\"userId\") == user_id, \"Booking userId mismatch\"\n        assert booking.get(\"checkIn\") == check_in_date, \"Booking checkIn date mismatch\"\n        assert booking.get(\"checkOut\") == check_out_date, \"Booking checkOut date mismatch\"\n        assert booking.get(\"guests\") == 2, \"Booking guests count mismatch\"\n\n    finally:\n        # Cleanup: Delete booking if created\n        if booking and booking.get(\"id\"):\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/bookings/{booking['id']}\",\n                    headers=headers,\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n\n        # Cleanup: Delete room if created\n        if room and room.get(\"id\"):\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/rooms/{room['id']}\",\n                    headers=headers,\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n\n        # Cleanup: Delete hotel if created\n        if hotel and hotel.get(\"id\"):\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/hotels/{hotel['id']}\",\n                    headers=headers,\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n\ntest_create_new_booking()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 126, in <module>\n  File \"<string>\", line 39, in test_create_new_booking\nAssertionError: Hotel creation failed: {\"status\":404,\"error\":\"Not Found\",\"message\":\"User not found with id: 1\",\"timestamp\":\"2025-08-02T02:11:41.023310Z\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.092Z",
    "modified": "2025-08-02T02:11:44.969Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "6ae50309-ce99-4f3d-bdb6-4185dfdd4083",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC009-test_cancel_booking",
    "description": "Verify that the /api/bookings/{id}/cancel POST endpoint cancels a booking successfully when provided with a valid booking id and userId.",
    "code": "import requests\nimport uuid\nimport base64\nimport json\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef decode_jwt_get_user_id(jwt_token):\n    try:\n        payload_part = jwt_token.split('.')[1]\n        # Pad base64 string if necessary\n        rem = len(payload_part) % 4\n        if rem > 0:\n            payload_part += '=' * (4 - rem)\n        decoded_bytes = base64.urlsafe_b64decode(payload_part)\n        payload = json.loads(decoded_bytes)\n        # Typically user id is in 'sub' or 'userId' claim\n        if 'userId' in payload:\n            return int(payload['userId'])\n        elif 'sub' in payload:\n            try:\n                return int(payload['sub'])\n            except ValueError:\n                pass\n        return None\n    except Exception:\n        return None\n\ndef test_cancel_booking():\n    # Step 1: Authenticate to get a valid userId (mock authentication)\n    # Using a mock idToken for authentication as Firebase is disabled\n    auth_url = f\"{BASE_URL}/auth/firebase\"\n    mock_id_token = \"mock-valid-id-token\"\n    auth_payload = {\"idToken\": mock_id_token}\n    auth_headers = {\"Content-Type\": \"application/json\"}\n\n    auth_response = requests.post(auth_url, json=auth_payload, headers=auth_headers, timeout=TIMEOUT)\n    assert auth_response.status_code == 200, f\"Authentication failed: {auth_response.text}\"\n    auth_data = auth_response.json()\n    jwt_token = None\n    if \"jwt\" in auth_data:\n        jwt_token = auth_data[\"jwt\"]\n    elif \"token\" in auth_data:\n        jwt_token = auth_data[\"token\"]\n    assert jwt_token is not None, \"JWT token not found in authentication response\"\n\n    user_id = decode_jwt_get_user_id(jwt_token)\n    assert user_id is not None, \"Failed to extract userId from JWT token\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {jwt_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Step 2: Create a hotel for the user (required to create room and booking)\n    hotel_url = f\"{BASE_URL}/api/hotels/{user_id}\"\n    hotel_payload = {\n        \"name\": f\"Test Hotel {uuid.uuid4()}\",\n        \"address\": \"123 Test St\",\n        \"district\": \"Test District\",\n        \"hotelType\": \"Test Type\",\n        \"phone\": \"1234567890\",\n        \"email\": f\"testhotel{uuid.uuid4()}@example.com\",\n        \"description\": \"Test hotel description\",\n        \"amenities\": [\"WiFi\", \"Parking\"],\n        \"photos\": []\n    }\n    hotel_response = requests.post(hotel_url, json=hotel_payload, headers=headers, timeout=TIMEOUT)\n    assert hotel_response.status_code == 200, f\"Hotel creation failed: {hotel_response.text}\"\n\n    # Get created hotel ID by fetching hotel by userId\n    get_hotel_response = requests.get(hotel_url, headers=headers, timeout=TIMEOUT)\n    assert get_hotel_response.status_code == 200, f\"Get hotel failed: {get_hotel_response.text}\"\n    hotel_data = get_hotel_response.json()\n    hotel_id = hotel_data.get(\"id\")\n    assert hotel_id is not None, \"Hotel ID not found in response\"\n\n    # Step 3: Create a room for the hotel\n    room_url = f\"{BASE_URL}/api/rooms\"\n    room_payload = {\n        \"hotelId\": hotel_id,\n        \"name\": f\"Test Room {uuid.uuid4()}\",\n        \"roomType\": \"Single\",\n        \"price\": 100.0,\n        \"description\": \"Test room description\",\n        \"photos\": [],\n        \"capacity\": 1\n    }\n    room_response = requests.post(room_url, json=room_payload, headers=headers, timeout=TIMEOUT)\n    assert room_response.status_code == 200, f\"Room creation failed: {room_response.text}\"\n\n    # Get created room ID by listing rooms for hotel\n    get_rooms_url = f\"{BASE_URL}/api/rooms/hotel/{hotel_id}\"\n    get_rooms_response = requests.get(get_rooms_url, headers=headers, timeout=TIMEOUT)\n    assert get_rooms_response.status_code == 200, f\"Get rooms failed: {get_rooms_response.text}\"\n    rooms = get_rooms_response.json()\n    assert isinstance(rooms, list) and len(rooms) > 0, \"No rooms found for hotel\"\n    room_id = rooms[0].get(\"id\")\n    assert room_id is not None, \"Room ID not found\"\n\n    # Step 4: Create a booking for the room\n    booking_url = f\"{BASE_URL}/api/bookings\"\n    booking_payload = {\n        \"userId\": user_id,\n        \"hotelId\": hotel_id,\n        \"roomId\": room_id,\n        \"checkIn\": \"2025-08-01\",\n        \"checkOut\": \"2025-08-05\",\n        \"guests\": 1,\n        \"specialRequests\": \"None\"\n    }\n    booking_response = requests.post(booking_url, json=booking_payload, headers=headers, timeout=TIMEOUT)\n    assert booking_response.status_code == 200, f\"Booking creation failed: {booking_response.text}\"\n\n    booking_data = booking_response.json()\n    booking_id = booking_data.get(\"id\")\n    assert booking_id is not None, \"Booking ID not found in booking creation response\"\n\n    try:\n        # Step 5: Cancel the booking using the cancel endpoint\n        cancel_url = f\"{BASE_URL}/api/bookings/{booking_id}/cancel\"\n        params = {\"userId\": user_id}\n        cancel_response = requests.post(cancel_url, headers=headers, params=params, timeout=TIMEOUT)\n        assert cancel_response.status_code == 200, f\"Booking cancellation failed: {cancel_response.text}\"\n\n        cancel_data = cancel_response.json()\n        # Assuming the response contains a status or message confirming cancellation\n        assert \"status\" in cancel_data or \"message\" in cancel_data, \"Cancellation confirmation missing\"\n    finally:\n        # Cleanup: Delete the booking if still exists (ignore errors)\n        try:\n            delete_booking_url = f\"{BASE_URL}/api/bookings/{booking_id}\"\n            requests.delete(delete_booking_url, headers=headers, timeout=TIMEOUT)\n        except Exception:\n            pass\n\n        # Cleanup: Delete the room\n        try:\n            delete_room_url = f\"{BASE_URL}/api/rooms/{room_id}\"\n            requests.delete(delete_room_url, headers=headers, timeout=TIMEOUT)\n        except Exception:\n            pass\n\n        # Cleanup: Delete the hotel\n        try:\n            delete_hotel_url = f\"{BASE_URL}/api/hotels/{hotel_id}\"\n            requests.delete(delete_hotel_url, headers=headers, timeout=TIMEOUT)\n        except Exception:\n            pass\n\ntest_cancel_booking()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 70, in test_cancel_booking\nAssertionError: Hotel creation failed: {\"timestamp\":\"2025-08-02T02:12:43.300+00:00\",\"status\":500,\"error\":\"Internal Server Error\",\"path\":\"/api/hotels/5\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.097Z",
    "modified": "2025-08-02T02:12:43.657Z"
  },
  {
    "projectId": "4e8dadd2-736c-4e6b-bb5a-c7945180fb65",
    "testId": "3ed02c55-86ba-4b99-8f54-178656592912",
    "userId": "04d8b458-5051-7093-db62-6e507d107d9f",
    "title": "TC010-test_verify_checkin_passcode",
    "description": "Verify that the /api/passcode/verify POST endpoint correctly verifies a check-in passcode and returns the verification result.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8080\"\nTIMEOUT = 30\n\ndef test_verify_checkin_passcode():\n    url = f\"{BASE_URL}/api/passcode/verify\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Since no passcode or booking ID is provided, we test with a sample passcode.\n    # In a real scenario, we might need to create a booking and get a valid passcode.\n    # Here, we test both a valid and invalid passcode scenario.\n\n    # Example payload for passcode verification (assuming passcode and bookingId fields)\n    # The PRD does not specify exact fields, so we assume typical fields:\n    # {\n    #   \"bookingId\": int,\n    #   \"passcode\": str\n    # }\n    # We'll test with an invalid passcode first.\n\n    invalid_payload = {\n        \"bookingId\": 999999,  # Assuming this booking does not exist\n        \"passcode\": \"INVALIDPASS\"\n    }\n\n    try:\n        response = requests.post(url, json=invalid_payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        json_response = response.json()\n        # Expecting a verification result, likely a boolean or status field\n        assert \"verified\" in json_response or \"success\" in json_response or \"result\" in json_response, \\\n            \"Response JSON does not contain expected verification result field\"\n        # The invalid passcode should not verify successfully\n        verified = json_response.get(\"verified\", json_response.get(\"success\", json_response.get(\"result\", None)))\n        assert verified is False or verified == \"false\" or verified == 0, \"Invalid passcode should not verify\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    # For a valid passcode test, we need to create a booking and get a valid passcode.\n    # Since no booking creation details are provided here, we skip that part.\n    # If available, implement booking creation and passcode retrieval here.\n\ntest_verify_checkin_passcode()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 46, in <module>\n  File \"<string>\", line 31, in test_verify_checkin_passcode\nAssertionError: Expected status code 200, got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-08-02T02:10:39.102Z",
    "modified": "2025-08-02T02:11:48.729Z"
  }
]

# Production Profile Configuration for YakRooms
# Optimized for secure production deployment with environment variables
# 
# SECURITY NOTICE: All sensitive configurations use environment variables
# Set these environment variables in your deployment platform (Railway, etc.)

spring.application.name=yakrooms

server.port=8080

# ================== MYSQL DATABASE ==================
# Production database configuration - SECURE with environment variables
# Required environment variables: MYSQLHOST, MYSQLPORT, MYSQLDATABASE, MYSQLUSER, MYSQLPASSWORD
spring.datasource.url=jdbc:mysql://${MYSQLHOST:localhost}:${MYSQLPORT:3306}/${MYSQLDATABASE:yakrooms}?useSSL=true&requireSSL=true&verifyServerCertificate=false&allowPublicKeyRetrieval=true&connectTimeout=10000&socketTimeout=10000
spring.datasource.username=${MYSQLUSER:root}
spring.datasource.password=${MYSQLPASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Startup resilience - Allow application to start even if DB is temporarily unavailable
spring.sql.init.continue-on-error=true

# Production database connection pool configuration - Optimized for high load
spring.datasource.hikari.maximum-pool-size=30
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.connection-test-query=SELECT 1

# ================== REDIS CACHING ==================
# Redis configuration for production caching - SECURE with environment variables
# Required environment variables: REDIS_HOST, REDIS_PORT, REDIS_PASSWORD
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.database=0
spring.data.redis.timeout=3000ms
spring.data.redis.ssl.enabled=false

# Redis startup resilience - Allow application to start even if Redis is temporarily unavailable
spring.data.redis.client-type=lettuce
spring.cache.redis.enable-statistics=false

# Redis connection resilience settings
spring.data.redis.connect-timeout=3000ms

# Redis connection pool configuration - Optimized for production
spring.data.redis.lettuce.pool.max-active=30
spring.data.redis.lettuce.pool.max-idle=15
spring.data.redis.lettuce.pool.min-idle=10
spring.data.redis.lettuce.pool.max-wait=3000ms
spring.data.redis.lettuce.shutdown-timeout=100ms

# Cache configuration - Production optimized
# Cache Configuration - Use simple cache to avoid Redis startup dependency
spring.cache.type=simple
spring.cache.cache-names=hotelDetails,hotelListings,searchResults,topHotels,userHotels

# Cache-specific TTLs (in milliseconds) - Production values
app.cache.hotel-details.ttl=3600000
app.cache.hotel-listings.ttl=1800000
app.cache.search-results.ttl=900000
app.cache.top-hotels.ttl=3600000

# ================== JPA / HIBERNATE ==================
# Production JPA configuration - CREATE ALL TABLES
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Enhanced table creation settings
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# Startup configuration - Allow table creation
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=false

# Fast startup settings
spring.main.lazy-initialization=false
spring.jmx.enabled=false

# ================== EMAIL ==================
# Production email configuration - SECURE with environment variables
# Required environment variables: SPRING_MAIL_USERNAME, SPRING_MAIL_PASSWORD
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

# ================== LOGGING ==================
# Production logging configuration - Enhanced for table creation
logging.level.com.yakrooms.be=INFO
logging.level.org.springframework.cache=WARN
logging.level.org.springframework.data.redis=WARN
logging.level.org.springframework.web.socket=WARN
logging.level.org.springframework.messaging=WARN

# Enable detailed SQL and DDL logging for table creation
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=DEBUG
logging.level.org.hibernate.tool.hbm2ddl=DEBUG
logging.level.org.hibernate.engine.jdbc.spi.SqlExceptionHelper=DEBUG

logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN

# Production logging pattern - No sensitive data
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ================== JACKSON JSON ==================
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.mapper.require-handlers-for-java8-times=false
spring.jackson.time-zone=UTC

# ================== ACTUATOR ==================
# Production actuator configuration - Secure and restricted
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.endpoint.health.show-components=when-authorized
management.endpoints.web.base-path=/actuator
management.server.port=8080

# Enable health checks for configured services (but don't block startup)
management.health.db.enabled=true
management.health.redis.enabled=true
management.health.defaults.enabled=true

# Health checks configured for production

# ================== BOOKING VALIDATION ==================
booking.max-advance-days=365
booking.min-stay-days=1
booking.max-stay-days=30

# ================== UPLOADTHING CONFIGURATION ==================
# Production UploadThing configuration - SECURE with environment variables
# Required environment variable: UPLOADTHING_API_SECRET
uploadthing.api.base-url=https://api.uploadthing.com/v5
uploadthing.api.secret=${UPLOADTHING_API_SECRET}
uploadthing.api.app-id=g5h92ke5c1
uploadthing.api.timeout=30s
uploadthing.api.retry.max-attempts=3
uploadthing.api.retry.backoff-delay=1s

# ================== JWT SECURITY CONFIGURATION ==================
# JWT security settings - SECURE with environment variables
# Required environment variable: JWT_SECRET (must be 256-bit secure random string)
jwt.secret=${JWT_SECRET}
jwt.access-token-expiration=900000
jwt.refresh-token-expiration=604800000
jwt.refresh-token.max-per-user=5
jwt.refresh-token.cleanup-batch-size=100

# ================== COOKIE SECURITY CONFIGURATION ==================
# Secure cookie settings - SECURE with environment variables
# Required environment variables: COOKIE_SECURE, COOKIE_DOMAIN
# Production default: Always use secure cookies (HTTPS required)
app.cookies.secure=${COOKIE_SECURE:true}
app.cookies.domain=${COOKIE_DOMAIN:}

# ================== SECURITY ==================
# Production security configuration - Maximum security
server.error.include-stacktrace=never
server.error.include-message=never
server.error.include-binding-errors=never
server.error.whitelabel.enabled=false

# ================== PERFORMANCE ==================
# Production performance settings - High performance optimized
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=25
server.tomcat.max-connections=10000
server.tomcat.accept-count=200
server.tomcat.connection-timeout=20000
server.tomcat.keep-alive-timeout=60000
server.tomcat.max-keep-alive-requests=1000

# Compression for better performance
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024

# ================== FIREBASE CONFIGURATION ==================
# Firebase configuration - SECURE with environment variables
# Required environment variable: FIREBASE_CONFIG_BASE64 (Base64 encoded Firebase service account JSON)
# This is handled by FirebaseConfig.java using the FIREBASE_CONFIG_BASE64 environment variable
